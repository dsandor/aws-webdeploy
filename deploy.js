"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MyWebStack = void 0;
const cdk = require("@aws-cdk/core");
const aws_cdk_static_website_1 = require("aws-cdk-static-website");
class MyWebStack extends aws_cdk_static_website_1.StaticWebsiteStack {
    constructor(scope, id) {
        super(scope, id, props);
    }
}
exports.MyWebStack = MyWebStack;
const workingPath = process.cwd();
const pkg = require(`${workingPath}/package.json`);
if (!pkg.webdeploy) {
    console.error('Error, package.json should have a "webdeploy" configuration section.');
    process.exit(2);
}
let props, stackName;
if (process.env['WEBDEPLOY_CONFIG_NAME'] && pkg.webdeploy[process.env['WEBDEPLOY_CONFIG_NAME'] || '']) {
    const configName = process.env['WEBDEPLOY_CONFIG_NAME'];
    console.log('Using web deploy configuration:', configName);
    stackName = pkg.webdeploy[configName].stackName;
    props = {
        websiteDistPath: pkg.webdeploy[configName].distPath || pkg.webdeploy[configName].websiteDistPath,
        deploymentVersion: pkg.webdeploy[configName].deploymentVersion || pkg.version,
        resourcePrefix: pkg.webdeploy[configName].resourcePrefix,
        indexDocument: pkg.webdeploy[configName].indexDocument || 'index.html',
        certificateArn: pkg.webdeploy[configName].certificateArn,
        domainNames: pkg.webdeploy[configName].domainNames,
    };
}
else {
    stackName = pkg.webdeploy.stackName;
    props = {
        websiteDistPath: pkg.webdeploy.distPath || pkg.webdeploy.websiteDistPath,
        deploymentVersion: pkg.webdeploy.deploymentVersion || pkg.version,
        resourcePrefix: pkg.webdeploy.resourcePrefix,
        indexDocument: pkg.webdeploy.indexDocument || 'index.html',
        certificateArn: pkg.webdeploy.certificateArn,
        domainNames: pkg.webdeploy.domainNames,
    };
}
console.log('Using the following properties for deployment:');
console.table(props);
const app = new cdk.App();
const stack = new MyWebStack(app, stackName || pkg.name);
console.log('stack:', stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFzQztBQUN0QyxtRUFBNEQ7QUFFNUQsTUFBYSxVQUFXLFNBQVEsMkNBQWtCO0lBQ2hELFlBQVksS0FBYyxFQUFFLEVBQVU7UUFFcEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNGO0FBTEQsZ0NBS0M7QUFFRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFbEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsV0FBVyxlQUFlLENBQUMsQ0FBQztBQUVuRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtJQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7SUFDdEYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQjtBQUVELElBQUksS0FBVSxFQUFFLFNBQWlCLENBQUM7QUFFbEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUU7SUFDckcsTUFBTSxVQUFVLEdBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDM0QsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRWhELEtBQUssR0FBRztRQUNOLGVBQWUsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGVBQWU7UUFDaEcsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxHQUFHLENBQUMsT0FBTztRQUM3RSxjQUFjLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxjQUFjO1FBQ3hELGFBQWEsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxZQUFZO1FBQ3RFLGNBQWMsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWM7UUFDeEQsV0FBVyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVztLQUNuRCxDQUFDO0NBQ0g7S0FBTTtJQUNMLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztJQUVwQyxLQUFLLEdBQUc7UUFDTixlQUFlLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlO1FBQ3hFLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLElBQUksR0FBRyxDQUFDLE9BQU87UUFDakUsY0FBYyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYztRQUM1QyxhQUFhLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLElBQUksWUFBWTtRQUMxRCxjQUFjLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjO1FBQzVDLFdBQVcsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVc7S0FDdkMsQ0FBQztDQUNIO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFckIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpO1xuaW1wb3J0IHsgU3RhdGljV2Vic2l0ZVN0YWNrIH0gZnJvbSAnYXdzLWNkay1zdGF0aWMtd2Vic2l0ZSc7XG5cbmV4cG9ydCBjbGFzcyBNeVdlYlN0YWNrIGV4dGVuZHMgU3RhdGljV2Vic2l0ZVN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcgKSB7XG4gICAgXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gIH1cbn1cblxuY29uc3Qgd29ya2luZ1BhdGggPSBwcm9jZXNzLmN3ZCgpO1xuXG5jb25zdCBwa2cgPSByZXF1aXJlKGAke3dvcmtpbmdQYXRofS9wYWNrYWdlLmpzb25gKTtcblxuaWYgKCFwa2cud2ViZGVwbG95KSB7XG4gIGNvbnNvbGUuZXJyb3IoJ0Vycm9yLCBwYWNrYWdlLmpzb24gc2hvdWxkIGhhdmUgYSBcIndlYmRlcGxveVwiIGNvbmZpZ3VyYXRpb24gc2VjdGlvbi4nKTtcbiAgcHJvY2Vzcy5leGl0KDIpO1xufVxuXG5sZXQgcHJvcHM6IGFueSwgc3RhY2tOYW1lOiBzdHJpbmc7XG5cbmlmIChwcm9jZXNzLmVudlsnV0VCREVQTE9ZX0NPTkZJR19OQU1FJ10gJiYgcGtnLndlYmRlcGxveVtwcm9jZXNzLmVudlsnV0VCREVQTE9ZX0NPTkZJR19OQU1FJ10gfHwgJyddKSB7XG4gIGNvbnN0IGNvbmZpZ05hbWU6IGFueSA9IHByb2Nlc3MuZW52WydXRUJERVBMT1lfQ09ORklHX05BTUUnXTtcbiAgY29uc29sZS5sb2coJ1VzaW5nIHdlYiBkZXBsb3kgY29uZmlndXJhdGlvbjonLCBjb25maWdOYW1lKTtcbiAgc3RhY2tOYW1lID0gcGtnLndlYmRlcGxveVtjb25maWdOYW1lXS5zdGFja05hbWU7XG5cbiAgcHJvcHMgPSB7XG4gICAgd2Vic2l0ZURpc3RQYXRoOiBwa2cud2ViZGVwbG95W2NvbmZpZ05hbWVdLmRpc3RQYXRoIHx8IHBrZy53ZWJkZXBsb3lbY29uZmlnTmFtZV0ud2Vic2l0ZURpc3RQYXRoLFxuICAgIGRlcGxveW1lbnRWZXJzaW9uOiBwa2cud2ViZGVwbG95W2NvbmZpZ05hbWVdLmRlcGxveW1lbnRWZXJzaW9uIHx8IHBrZy52ZXJzaW9uLFxuICAgIHJlc291cmNlUHJlZml4OiBwa2cud2ViZGVwbG95W2NvbmZpZ05hbWVdLnJlc291cmNlUHJlZml4LFxuICAgIGluZGV4RG9jdW1lbnQ6IHBrZy53ZWJkZXBsb3lbY29uZmlnTmFtZV0uaW5kZXhEb2N1bWVudCB8fCAnaW5kZXguaHRtbCcsXG4gICAgY2VydGlmaWNhdGVBcm46IHBrZy53ZWJkZXBsb3lbY29uZmlnTmFtZV0uY2VydGlmaWNhdGVBcm4sXG4gICAgZG9tYWluTmFtZXM6IHBrZy53ZWJkZXBsb3lbY29uZmlnTmFtZV0uZG9tYWluTmFtZXMsXG4gIH07XG59IGVsc2Uge1xuICBzdGFja05hbWUgPSBwa2cud2ViZGVwbG95LnN0YWNrTmFtZTtcblxuICBwcm9wcyA9IHtcbiAgICB3ZWJzaXRlRGlzdFBhdGg6IHBrZy53ZWJkZXBsb3kuZGlzdFBhdGggfHwgcGtnLndlYmRlcGxveS53ZWJzaXRlRGlzdFBhdGgsXG4gICAgZGVwbG95bWVudFZlcnNpb246IHBrZy53ZWJkZXBsb3kuZGVwbG95bWVudFZlcnNpb24gfHwgcGtnLnZlcnNpb24sXG4gICAgcmVzb3VyY2VQcmVmaXg6IHBrZy53ZWJkZXBsb3kucmVzb3VyY2VQcmVmaXgsXG4gICAgaW5kZXhEb2N1bWVudDogcGtnLndlYmRlcGxveS5pbmRleERvY3VtZW50IHx8ICdpbmRleC5odG1sJyxcbiAgICBjZXJ0aWZpY2F0ZUFybjogcGtnLndlYmRlcGxveS5jZXJ0aWZpY2F0ZUFybixcbiAgICBkb21haW5OYW1lczogcGtnLndlYmRlcGxveS5kb21haW5OYW1lcyxcbiAgfTtcbn1cblxuY29uc29sZS5sb2coJ1VzaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBmb3IgZGVwbG95bWVudDonKTtcbmNvbnNvbGUudGFibGUocHJvcHMpO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBNeVdlYlN0YWNrKGFwcCwgc3RhY2tOYW1lIHx8IHBrZy5uYW1lKTtcbmNvbnNvbGUubG9nKCdzdGFjazonLCBzdGFjayk7Il19